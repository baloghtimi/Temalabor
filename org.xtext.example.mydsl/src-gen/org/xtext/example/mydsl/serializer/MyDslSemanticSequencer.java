/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Camp;
import org.xtext.example.mydsl.myDsl.Card;
import org.xtext.example.mydsl.myDsl.CardSenior;
import org.xtext.example.mydsl.myDsl.Color;
import org.xtext.example.mydsl.myDsl.ColorSenior;
import org.xtext.example.mydsl.myDsl.Freshman;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OperativeOrganizer;
import org.xtext.example.mydsl.myDsl.Room;
import org.xtext.example.mydsl.myDsl.RoomSenior;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CAMP:
				sequence_Camp(context, (Camp) semanticObject); 
				return; 
			case MyDslPackage.CARD:
				sequence_Card(context, (Card) semanticObject); 
				return; 
			case MyDslPackage.CARD_SENIOR:
				sequence_CardSenior(context, (CardSenior) semanticObject); 
				return; 
			case MyDslPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case MyDslPackage.COLOR_SENIOR:
				sequence_ColorSenior(context, (ColorSenior) semanticObject); 
				return; 
			case MyDslPackage.FRESHMAN:
				sequence_Freshman(context, (Freshman) semanticObject); 
				return; 
			case MyDslPackage.OPERATIVE_ORGANIZER:
				sequence_OperativeOrganizer(context, (OperativeOrganizer) semanticObject); 
				return; 
			case MyDslPackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case MyDslPackage.ROOM_SENIOR:
				sequence_RoomSenior(context, (RoomSenior) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Camp returns Camp
	 *
	 * Constraint:
	 *     (name=ID colorseniors+=ColorSenior* cardseniors+=CardSenior* roomseniors+=RoomSenior* colors+=Color*)
	 */
	protected void sequence_Camp(ISerializationContext context, Camp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CardSenior returns CardSenior
	 *
	 * Constraint:
	 *     (
	 *         name=Name 
	 *         year=INT 
	 *         color=ColorType 
	 *         card=CardType 
	 *         superior+=[ColorSenior|Name] 
	 *         inferiors+=[RoomSenior|Name] 
	 *         inferiors+=[RoomSenior|Name]*
	 *     )
	 */
	protected void sequence_CardSenior(ISerializationContext context, CardSenior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Card returns Card
	 *
	 * Constraint:
	 *     (name=Name type=CardType cardsenior+=[CardSenior|Name] rooms+=Room*)
	 */
	protected void sequence_Card(ISerializationContext context, Card semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ColorSenior returns ColorSenior
	 *
	 * Constraint:
	 *     (name=Name year=INT color=ColorType inferiors+=[CardSenior|Name] inferiors+=[CardSenior|Name]*)
	 */
	protected void sequence_ColorSenior(ISerializationContext context, ColorSenior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Color returns Color
	 *
	 * Constraint:
	 *     (name=Name type=ColorType colorsenior+=[ColorSenior|Name] cards+=Card*)
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Freshman returns Freshman
	 *
	 * Constraint:
	 *     (name=Name neptun=STRING color=ColorType card=CardType)
	 */
	protected void sequence_Freshman(ISerializationContext context, Freshman semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FRESHMAN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FRESHMAN__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FRESHMAN__NEPTUN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FRESHMAN__NEPTUN));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FRESHMAN__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FRESHMAN__COLOR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FRESHMAN__CARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FRESHMAN__CARD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFreshmanAccess().getNameNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFreshmanAccess().getNeptunSTRINGTerminalRuleCall_4_0(), semanticObject.getNeptun());
		feeder.accept(grammarAccess.getFreshmanAccess().getColorColorTypeEnumRuleCall_7_0(), semanticObject.getColor());
		feeder.accept(grammarAccess.getFreshmanAccess().getCardCardTypeEnumRuleCall_10_0(), semanticObject.getCard());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OperativeOrganizer returns OperativeOrganizer
	 *
	 * Constraint:
	 *     (
	 *         name=Name 
	 *         year=INT 
	 *         color=ColorType 
	 *         superior+=[OperativeOrganizer|Name] 
	 *         inferiors+=[OperativeOrganizer|Name] 
	 *         inferiors+=[OperativeOrganizer|Name]*
	 *     )
	 */
	protected void sequence_OperativeOrganizer(ISerializationContext context, OperativeOrganizer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoomSenior returns RoomSenior
	 *
	 * Constraint:
	 *     (name=Name year=INT color=ColorType card=CardType superior+=[CardSenior|Name])
	 */
	protected void sequence_RoomSenior(ISerializationContext context, RoomSenior semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (name=Name roomsenior+=[RoomSenior|Name])
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
