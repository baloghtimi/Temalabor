/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.CardType;
import org.xtext.example.mydsl.myDsl.ColorType;
import org.xtext.example.mydsl.myDsl.Freshman;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Freshman</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FreshmanImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FreshmanImpl#getNeptun <em>Neptun</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FreshmanImpl#getColor <em>Color</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FreshmanImpl#getCard <em>Card</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FreshmanImpl extends MinimalEObjectImpl.Container implements Freshman
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getNeptun() <em>Neptun</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeptun()
   * @generated
   * @ordered
   */
  protected static final String NEPTUN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNeptun() <em>Neptun</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeptun()
   * @generated
   * @ordered
   */
  protected String neptun = NEPTUN_EDEFAULT;

  /**
   * The default value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected static final ColorType COLOR_EDEFAULT = ColorType.BLACK_COLOR;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected ColorType color = COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getCard() <em>Card</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCard()
   * @generated
   * @ordered
   */
  protected static final CardType CARD_EDEFAULT = CardType.BLUE_COLOR;

  /**
   * The cached value of the '{@link #getCard() <em>Card</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCard()
   * @generated
   * @ordered
   */
  protected CardType card = CARD_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FreshmanImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FRESHMAN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FRESHMAN__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNeptun()
  {
    return neptun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNeptun(String newNeptun)
  {
    String oldNeptun = neptun;
    neptun = newNeptun;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FRESHMAN__NEPTUN, oldNeptun, neptun));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColorType getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(ColorType newColor)
  {
    ColorType oldColor = color;
    color = newColor == null ? COLOR_EDEFAULT : newColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FRESHMAN__COLOR, oldColor, color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CardType getCard()
  {
    return card;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCard(CardType newCard)
  {
    CardType oldCard = card;
    card = newCard == null ? CARD_EDEFAULT : newCard;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FRESHMAN__CARD, oldCard, card));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FRESHMAN__NAME:
        return getName();
      case MyDslPackage.FRESHMAN__NEPTUN:
        return getNeptun();
      case MyDslPackage.FRESHMAN__COLOR:
        return getColor();
      case MyDslPackage.FRESHMAN__CARD:
        return getCard();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FRESHMAN__NAME:
        setName((String)newValue);
        return;
      case MyDslPackage.FRESHMAN__NEPTUN:
        setNeptun((String)newValue);
        return;
      case MyDslPackage.FRESHMAN__COLOR:
        setColor((ColorType)newValue);
        return;
      case MyDslPackage.FRESHMAN__CARD:
        setCard((CardType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FRESHMAN__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MyDslPackage.FRESHMAN__NEPTUN:
        setNeptun(NEPTUN_EDEFAULT);
        return;
      case MyDslPackage.FRESHMAN__COLOR:
        setColor(COLOR_EDEFAULT);
        return;
      case MyDslPackage.FRESHMAN__CARD:
        setCard(CARD_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FRESHMAN__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MyDslPackage.FRESHMAN__NEPTUN:
        return NEPTUN_EDEFAULT == null ? neptun != null : !NEPTUN_EDEFAULT.equals(neptun);
      case MyDslPackage.FRESHMAN__COLOR:
        return color != COLOR_EDEFAULT;
      case MyDslPackage.FRESHMAN__CARD:
        return card != CARD_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", neptun: ");
    result.append(neptun);
    result.append(", color: ");
    result.append(color);
    result.append(", card: ");
    result.append(card);
    result.append(')');
    return result.toString();
  }

} //FreshmanImpl
