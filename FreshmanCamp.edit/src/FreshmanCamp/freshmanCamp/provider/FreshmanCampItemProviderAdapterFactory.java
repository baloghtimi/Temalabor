/**
 */
package FreshmanCamp.freshmanCamp.provider;

import FreshmanCamp.freshmanCamp.util.FreshmanCampAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FreshmanCampItemProviderAdapterFactory extends FreshmanCampAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FreshmanCampItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Camp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CampItemProvider campItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Camp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCampAdapter() {
		if (campItemProvider == null) {
			campItemProvider = new CampItemProvider(this);
		}

		return campItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Color} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorItemProvider colorItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Color}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createColorAdapter() {
		if (colorItemProvider == null) {
			colorItemProvider = new ColorItemProvider(this);
		}

		return colorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Participant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParticipantItemProvider participantItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Participant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createParticipantAdapter() {
		if (participantItemProvider == null) {
			participantItemProvider = new ParticipantItemProvider(this);
		}

		return participantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Card} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardItemProvider cardItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Card}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCardAdapter() {
		if (cardItemProvider == null) {
			cardItemProvider = new CardItemProvider(this);
		}

		return cardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Freshman} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FreshmanItemProvider freshmanItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Freshman}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFreshmanAdapter() {
		if (freshmanItemProvider == null) {
			freshmanItemProvider = new FreshmanItemProvider(this);
		}

		return freshmanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Senior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeniorItemProvider seniorItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Senior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSeniorAdapter() {
		if (seniorItemProvider == null) {
			seniorItemProvider = new SeniorItemProvider(this);
		}

		return seniorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.Animator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnimatorItemProvider animatorItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.Animator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAnimatorAdapter() {
		if (animatorItemProvider == null) {
			animatorItemProvider = new AnimatorItemProvider(this);
		}

		return animatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.OperativeOrganizer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperativeOrganizerItemProvider operativeOrganizerItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.OperativeOrganizer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOperativeOrganizerAdapter() {
		if (operativeOrganizerItemProvider == null) {
			operativeOrganizerItemProvider = new OperativeOrganizerItemProvider(this);
		}

		return operativeOrganizerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.RoomSenior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomSeniorItemProvider roomSeniorItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.RoomSenior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRoomSeniorAdapter() {
		if (roomSeniorItemProvider == null) {
			roomSeniorItemProvider = new RoomSeniorItemProvider(this);
		}

		return roomSeniorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.CardSenior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardSeniorItemProvider cardSeniorItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.CardSenior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCardSeniorAdapter() {
		if (cardSeniorItemProvider == null) {
			cardSeniorItemProvider = new CardSeniorItemProvider(this);
		}

		return cardSeniorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FreshmanCamp.freshmanCamp.ColorSenior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorSeniorItemProvider colorSeniorItemProvider;

	/**
	 * This creates an adapter for a {@link FreshmanCamp.freshmanCamp.ColorSenior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createColorSeniorAdapter() {
		if (colorSeniorItemProvider == null) {
			colorSeniorItemProvider = new ColorSeniorItemProvider(this);
		}

		return colorSeniorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (campItemProvider != null) campItemProvider.dispose();
		if (colorItemProvider != null) colorItemProvider.dispose();
		if (participantItemProvider != null) participantItemProvider.dispose();
		if (cardItemProvider != null) cardItemProvider.dispose();
		if (roomItemProvider != null) roomItemProvider.dispose();
		if (freshmanItemProvider != null) freshmanItemProvider.dispose();
		if (seniorItemProvider != null) seniorItemProvider.dispose();
		if (animatorItemProvider != null) animatorItemProvider.dispose();
		if (operativeOrganizerItemProvider != null) operativeOrganizerItemProvider.dispose();
		if (roomSeniorItemProvider != null) roomSeniorItemProvider.dispose();
		if (cardSeniorItemProvider != null) cardSeniorItemProvider.dispose();
		if (colorSeniorItemProvider != null) colorSeniorItemProvider.dispose();
	}

}
